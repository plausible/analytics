name: Deploy Analytics Application

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
      run_tests:
        description: "Run tests before deployment"
        required: false
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

env:
  VPS_HOST: ${{ secrets.VPS_HOST }}
  VPS_USER: ${{ secrets.VPS_USER }}
  VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
  CACHE_VERSION: v15

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
      clickhouse:
        image: clickhouse/clickhouse-server:24.12.2.29-alpine
        ports:
          - 8123:8123
        env:
          options: >-
            --health-cmd nc -zw3 localhost 8124
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: marocchino/tool-versions-action@v1
        id: versions
      - uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ steps.versions.outputs.elixir }}
          otp-version: ${{ steps.versions.outputs.erlang }}

      - uses: actions/cache@v4
        with:
          path: |
            deps
            _build
            tracker/node_modules
            priv/tracker/js
            priv/tracker/verifier
          key: ${{ env.MIX_ENV }}-${{ env.CACHE_VERSION }}-${{ github.head_ref || github.ref }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ env.MIX_ENV }}-${{ env.CACHE_VERSION }}-${{ github.head_ref || github.ref }}-
            ${{ env.MIX_ENV }}-${{ env.CACHE_VERSION }}-refs/heads/master-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.versions.outputs.nodejs }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: |
          mix deps.get --only $MIX_ENV
          npm ci --prefix assets
          npm ci --prefix tracker

      - name: Build tracker
        run: |
          npm run deploy --prefix tracker

      - name: Compile Elixir
        run: |
          mix compile --warnings-as-errors --all-warnings

      - name: Setup database
        run: |
          mix do ecto.create, ecto.migrate
          mix run -e "Tzdata.ReleaseUpdater.poll_for_update"

      - name: Run tests
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.run_tests != 'false' }}
        run: |
          mix test --max-failures 1 --warnings-as-errors
          npm test --prefix assets

      - name: Security scan
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  deploy-staging:
    name: Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ env.VPS_SSH_KEY }}
          script: |
            cd /home/deploy
            ./deploy.sh develop

      - name: Health check staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ env.VPS_SSH_KEY }}
          script: |
            curl -f http://localhost/health || exit 1

  deploy-production:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ env.VPS_SSH_KEY }}
          script: |
            cd /home/deploy
            ./deploy.sh main

      - name: Health check production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.VPS_HOST }}
          username: ${{ env.VPS_USER }}
          key: ${{ env.VPS_SSH_KEY }}
          script: |
            curl -f https://analytics.yourdomain.com/health || exit 1

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#deployments"
          text: "Analytics application deployed successfully to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#deployments"
          text: "Analytics application deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
